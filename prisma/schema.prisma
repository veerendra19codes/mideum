// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MPost {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  title     String       @db.VarChar(255)
  content   String?
  image     String?
  tags      String[]
  published Boolean      @default(false)
  author    MUser        @relation(fields: [authorId], references: [id])
  authorId  Int
  likes     MLikes[]
  bookmarks MBookmarks[]
  MComments MComments[]
}

model MUser {
  id        Int          @id @default(autoincrement())
  email     String       @unique
  username  String       @unique
  name      String?
  password  String
  bio       String?
  image     String?
  posts     MPost[]
  likes     MLikes[]
  bookmarks MBookmarks[]
  MComments MComments[]
}

model MLikes {
  id     Int   @id @default(autoincrement())
  user   MUser @relation(fields: [userId], references: [id])
  userId Int
  post   MPost @relation(fields: [postId], references: [id])
  postId Int
}

model MBookmarks {
  id     Int   @id @default(autoincrement())
  user   MUser @relation(fields: [userId], references: [id])
  userId Int
  post   MPost @relation(fields: [postId], references: [id])
  postId Int
}

model MComments {
  id      Int    @id @default(autoincrement())
  user    MUser  @relation(fields: [userId], references: [id])
  userId  Int
  post    MPost  @relation(fields: [postId], references: [id])
  postId  Int
  comment String
}
